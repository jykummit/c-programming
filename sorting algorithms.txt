sorting algorithms:

1.linear search:
search weather the element in the array is present r not.

program:
#include <stdio.h>
int  main()
{
    int n,a[30],i,j,key;
    printf("enter n value");
    scanf("%d",&n);
    printf("enter elements element is \n");
    for( i=0;i<n;i++)
    scanf("%d",&a[i]);
    printf("enter key element\n");
    scanf("%d",&key);
    for(i=0;i<n;i++){
        if(a[i]==key)
            break;
            
        if(i<n)
            printf("key is found");
        
        else{
            printf("key is not found\n");
        }
    }
    
}

2.binary search:A Binary Search is a sorting algorithm, that is used to search an element in a sorted array. 
  A binary search technique works only on a sorted array, so an array must be sorted to apply binary search on the array. 
  It is a searching technique that is better then the liner search technique as the number of iterations decreases in the binary search.

algorithm:
-->do until the pointers low and high meet each other.
    mid = (low + high)/2
    if (x == arr[mid])
        return mid
    else if (x > arr[mid]) // x is on the right side
        low = mid + 1
    else                       // x is on the left side
        high = mid - 1

program:
#include <stdio.h>
int main()
{
int i, low, high, mid, n, key, array[100];
printf("Enter number of elements");
scanf("%d",&n);
printf("Enter %d integers", n);
for(i = 0; i < n; i++)
scanf("%d",&array[i]);
printf("Enter value to find");
scanf("%d", &key);
low = 0;
high = n - 1;
mid = (low+high)/2;
while (low <= high) {
if(array[mid] < key)
low = mid + 1;
else if (array[mid] == key) {
printf("%d key found at location %d", key, mid+1);
break;
}
else
high = mid - 1;
mid = (low + high)/2;
}
if(low > high)
printf("key Not found! %d ", key);
return 0;
}

3.bubble sorting:Bubble sort in C is a straightforward sorting 
  algorithm that checks and swaps elements if they are not in the intended order. 
  It compares two adjacent elements to find which one is greater or lesser and switches 
  them based on the given condition until the final place of the element is found.

algorithm:
The basic bubble sort algorithm can be explained as follows:

bubbleSort(array)

  for i <- 1 to indexOfLastUnsortedElement-1

    if leftElement > rightElement

      swap leftElement and rightElement

end bubbleSort

program:
#include <stdio.h>

int main(){

    int arr[50], n, i, j, temp;    

    printf("Please Enter the Number of Elements you want in the array: ");

    scanf("%d", &n);    

    printf("Please Enter the Value of Elements: ");

    for(i = 0; i < n; i++)

        scanf("%d", &arr[i]);

    for(i = 0; i < n - 1; i++){       

        for(j = 0; j< n - i - 1; j++){          

            if(arr[j] > arr[j + 1]){               

                temp = arr[j];

                arr[i] = arr[j + 1];

                arr[j + 1] = temp;

            }

        }

    }

    printf("Array after implementing bubble sort: ");

    for(i = 0; i < n; i++){

        printf("%d  ", arr[i]);

    }

    return 0;

}